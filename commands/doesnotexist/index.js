const { methods } = require("./fetch-methods.js");

module.exports = {
	Name: "doesnotexist",
	Aliases: ["dne"],
	Author: "supinic",
	Cooldown: 15000,
	Description: "Posts a random picture from the site thispersondoesnotexist.com, and its variants (check extended help for a list). These pictures are not real, they have been generated by an AI.",
	Flags: ["non-nullable","pipe"],
	Params: [
		{ name: "linkOnly", type: "boolean" },
		{ name: "summary", type: "boolean" },
		{ name: "wordOnly", type: "boolean" }
	],
	Whitelist_Response: null,
	Code: (async function doesnotexist (context, type) {
		if (!type) {
			type = "person";
		}

		type = type.toLowerCase();

		const types = [...new Set(methods.flatMap(i => i.types))].sort();
		if (type === "list") {
			return {
				reply: `Available types: ${types.join(", ")}`
			};
		}
		else if (!types.includes(type)) {
			return {
				success: false,
				reply: `Invalid type provided! Use one of: ${types.join(", ")}`
			};
		}

		let executionMethod;
		if (context.params.summary === true) {
			const definition = methods.find(i => i.types.includes(type) && i.parameter === "summary");
			if (!definition) {
				return {
					success: false,
					reply: `That type does not support the "summary" parameter!`
				};
			}

			executionMethod = definition.execute;
		}
		else {
			executionMethod = methods.find(i => i.types.includes(type)).execute;
		}

		const result = await executionMethod(context, type);

		if (context.params.linkOnly && result.link) {
			return {
				success: result.success ?? true,
				reply: result.link
			};
		}
		else {
			return result;
		}
	}),
	Dynamic_Description: (async function (prefix) {
		const list = methods
			.flatMap(i => i.descriptions)
			.sort()
			.map(i => `<li>${i}</li>`)
			.join("");

		return [
			`Posts a random picture from the set of "this X does not exist" websites.`,
			"",

			`<code>${prefix}dne list</code>`,
			"Posts a list of available types of stuff that does not exist",
			"",

			`<code>${prefix}dne</code>`,
			"Posts a random person that does not exist",
			"",

			`<code>${prefix}dne (type)</code>`,
			"Posts a random (type) that does not exist",
			"",

			`<code>${prefix}dne word wordOnly:true</code>`,
			"Posts a random word, without the word class, definition or examples",
			"",

			`<code>${prefix}dne anime summary:true</code>`,
			`<code>${prefix}dne sneaker summary:true</code>`,
			"Posts a random type, but instead of a picture a summary of multiple pictures or a slider menu is shown.",
			"",

			"Available types:",
			`<ul>${list}</ul>`
		];
	})
};
