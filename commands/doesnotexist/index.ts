import { declare, type SubcommandDefinition } from "../../classes/command.js";
import { DoesNotExistSubcommands } from "./subcommands/index.js";

export type DoesNotExistSubcommandDefinition = SubcommandDefinition<typeof doesNotExistCommandDefinition>;

const doesNotExistCommandDefinition = declare({
	Name: "doesnotexist",
	Aliases: ["dne"],
	Cooldown: 15000,
	Description: "Posts a random picture from the site thispersondoesnotexist.com, and its variants (check extended help for a list). These pictures are not real, they have been generated by an AI.",
	Flags: ["non-nullable", "pipe"],
	Params: [
		{ name: "linkOnly", type: "boolean" },
		{ name: "summary", type: "boolean" },
		{ name: "wordOnly", type: "boolean" }
	] as const,
	Whitelist_Response: null,
	Code: (async function doesnotexist (context, type) {
		const subcommand = DoesNotExistSubcommands.get(type) ?? DoesNotExistSubcommands.default;
		const result = await subcommand.execute.call(this, context);

		if (context.params.linkOnly && result.text) {
			return {
				success: result.success ?? true,
				reply: result.text
			};
		}
		else {
			return result;
		}
	}),
	Dynamic_Description: (async function (prefix) {
		const description = await DoesNotExistSubcommands.createDescription();

		return [
			`Posts a random picture from the set of "this X does not exist" websites.`,
			"",

			`<code>${prefix}dne</code>`,
			"Posts a random person that does not exist",
			"",

			`<code>${prefix}dne (type)</code>`,
			"Posts a random (type) that does not exist",
			"",

			"Available types + more info:",
			...description
		];
	})
});

export default doesNotExistCommandDefinition;
